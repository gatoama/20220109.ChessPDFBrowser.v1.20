/* 
 * Copyright (C) 2021 Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 */
package com.frojasg1.chesspdfbrowser.application;

import com.frojasg1.applications.common.configuration.application.BaseApplicationConfigurationInterface;
import com.frojasg1.chesspdfbrowser.engine.configuration.ApplicationConfiguration;
import com.frojasg1.general.desktop.view.pdf.ImageJPanel;
import com.frojasg1.general.desktop.view.splash.GenericBasicSplash;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;

/**
 *
 * @author Usuario
 */
public class Splash extends GenericBasicSplash
{
	protected static Splash _instance = null;
	public static final String sa_configurationBaseFileName = "Splash";

	public static Splash instance()
	{
		if( _instance == null )
			_instance = new Splash( ApplicationConfiguration.instance() );

		return( _instance );
	}

	/**
	 * Creates new form Splash
	 */
	protected Splash( BaseApplicationConfigurationInterface applicationConfiguration )
	{
		super(applicationConfiguration);
//		initComponents();

//		activateProgress(false );

//		setListenersRecursive( this );
		
//		setWindowConfiguration( );

//		initOwnComponents();

		init();
	}

	public void init()
	{
		setImage();

		setCenteredLocation();

		setListenersRecursive( this );
		
		initOwnComponents();

		setWindowConfiguration( );
	}

	protected void setImage()
	{
		setImage( getImage( AboutJDialog.RESOURCE_FOR_ABOUT_ICON ) );
	}

	protected void initOwnComponents()
	{
		Dimension imageDimensions = getSizeOfOriginalImageJPanel();
		int xx = (int) (imageDimensions.getWidth() / 2);
		int yyIncrement = (int) (imageDimensions.getHeight() / 6);

		Font font = new Font("Calibri", Font.BOLD, 20);
		setOriginalFontForTextLines( font );

		addTextLine( new ImageJPanel.TextLine( "Chess PDF", new Point( xx, 2 * yyIncrement ) ) );
		addTextLine( new ImageJPanel.TextLine( "browser", new Point( xx, 3 * yyIncrement ) ) );

		ImageJPanel.TextLine textLineVersion = new ImageJPanel.TextLine( ApplicationConfiguration.VERSION, new Point( xx, yyIncrement * 4 ) );
		font = new Font("Calibri", Font.BOLD, 23);
		textLineVersion.setFont(font);
		textLineVersion.setColor( Color.GREEN.darker() );
		addTextLine( textLineVersion );

//		setForegroundColorForTextLines( new Color( 112, 173, 71 ) );	// Green
		setForegroundColorForTextLines( Color.BLACK );

//		SwingUtilities.invokeLater( () ->{ 
//			zoomImage();
//		} );
	}

	protected void setWindowConfiguration( )
	{
		super.setWindowConfiguration();
	}

	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        getContentPane().setLayout(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
        //</editor-fold>

		/* Create and display the form */
/*
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Splash().setVisible(true);
			}
		});
*/
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


	public static void free()
	{
		if( _instance != null )
		{
			_instance.setVisible( false );
			_instance.dispose();
			_instance = null;
		}
	}

	@Override
	protected String getBaseConfigurationFileName()
	{
		return(sa_configurationBaseFileName);
	}
}
