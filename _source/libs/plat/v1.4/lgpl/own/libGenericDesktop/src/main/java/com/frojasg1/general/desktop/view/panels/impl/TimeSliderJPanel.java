/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.frojasg1.general.desktop.view.panels.impl;

import com.frojasg1.applications.common.components.resizecomp.MapResizeRelocateComponentItem;
import com.frojasg1.applications.common.components.resizecomp.ResizeRelocateItem;
import com.frojasg1.general.desktop.view.panels.CustomJPanelBase;
import com.frojasg1.general.desktop.view.zoom.mapper.ComponentMapper;
import com.frojasg1.general.desktop.view.zoom.mapper.ComposedComponent;
import com.frojasg1.general.time.TimeFunctions;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.function.Consumer;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 */
public class TimeSliderJPanel extends CustomJPanelBase implements ComposedComponent {

	protected MapResizeRelocateComponentItem _resizeRelocateInfo = null;

	protected Consumer<Integer> _listener;

	protected int _totalTimeMs;
	protected int _sliderValueRange;

	protected ChangeListener _jsliderValueListener;
	protected KeyListener _jsliderKeyListener;

	protected boolean _cancelled = false;
	protected Integer _progressDuringAdjustment;

	protected int _acceptableDelta = 0;

	protected boolean _preventFromChange = false;


	/**
	 * Creates new form NewJPanel
	 */
	public TimeSliderJPanel() {
	}

	public void init()
	{
		initComponents();
		setWindowConfiguration();

		addInternalListeners();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSlider = new javax.swing.JSlider();
        jL_elapsedTime = new javax.swing.JLabel();
        jL_remainingTime = new javax.swing.JLabel();
        jL_totalTime = new javax.swing.JLabel();

        setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(410, 35));
        jPanel1.setLayout(null);
        jPanel1.add(jSlider);
        jSlider.setBounds(0, 15, 405, 16);

        jL_elapsedTime.setText("03:51");
        jPanel1.add(jL_elapsedTime);
        jL_elapsedTime.setBounds(10, 0, 85, 16);

        jL_remainingTime.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_remainingTime.setText("03:51");
        jPanel1.add(jL_remainingTime);
        jL_remainingTime.setBounds(315, 0, 85, 16);

        jL_totalTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_totalTime.setText("03:51");
        jPanel1.add(jL_totalTime);
        jL_totalTime.setBounds(160, 0, 85, 16);

        add(jPanel1);
        jPanel1.setBounds(0, 0, 410, 35);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jL_elapsedTime;
    private javax.swing.JLabel jL_remainingTime;
    private javax.swing.JLabel jL_totalTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider;
    // End of variables declaration//GEN-END:variables

	protected JPanel getParentPanel()
	{
		return( jPanel1 );
	}

	protected void setWindowConfiguration( )
	{
		_resizeRelocateInfo = new MapResizeRelocateComponentItem();
		MapResizeRelocateComponentItem mapRRCI = _resizeRelocateInfo;
		try
		{
//			boolean postponeInit = true;
//			mapRRCI.putResizeRelocateComponentItem( this, ResizeRelocateItem.FILL_WHOLE_WIDTH, postponeInit );
			mapRRCI.putResizeRelocateComponentItem( getParentPanel(), ResizeRelocateItem.FILL_WHOLE_PARENT );
			mapRRCI.putResizeRelocateComponentItem( jL_remainingTime, ResizeRelocateItem.MOVE_TO_RIGHT );
			mapRRCI.putResizeRelocateComponentItem( jL_totalTime, ResizeRelocateItem.MOVE_MID_HORIZONTAL_SIDE_PROPORTIONAL );
			mapRRCI.putResizeRelocateComponentItem( jSlider, ResizeRelocateItem.RESIZE_TO_RIGHT );
		}
		catch( Throwable th )
		{
			th.printStackTrace();
		}
	}

	public boolean isCancelled() {
		return _cancelled;
	}

	public void setCancelled(boolean _cancelled) {
		this._cancelled = _cancelled;
	}



	@Override
	public MapResizeRelocateComponentItem getResizeRelocateInfo()
	{
		return( _resizeRelocateInfo );
	}

	@Override
	public Dimension getInternalSize()
	{
		return( getParentPanel().getSize() );
	}

	@Override
	public Rectangle getInternalBounds()
	{
		return( getParentPanel().getBounds() );
	}

	@Override
	public void releaseResources()
	{
		_listener = null;

		removeInternalListeners();
	}

	public void setAcceptableDelta(int _acceptableDelta) {
		this._acceptableDelta = _acceptableDelta;
	}

	protected boolean beyondAcceptedDelta( Integer expectedValue, int realValue )
	{
		boolean result = true;
		if( expectedValue != null )
			result = ( Math.abs( realValue - expectedValue ) <= _acceptableDelta );

		return( result );
	}

	protected void addInternalListeners()
	{
		if( _jsliderValueListener == null )
		{
			_jsliderValueListener = evt -> {
				Integer progressDuringAdjustment = _progressDuringAdjustment;
				if( ! jSlider.getValueIsAdjusting() )
				{
					if( !isCancelled() )
					{
						if( !_preventFromChange )
						{
							if( _listener != null )
								_listener.accept( jSlider.getValue() );

							_progressDuringAdjustment = null;
						}
					}
					else
					{
//						if( progressDuringAdjustment != null )
							setSliderValueWithoutChangeEvent( progressDuringAdjustment );

						setCancelled(false);

						_progressDuringAdjustment = null;
					}
				}
/*
				else if( isCancelled() && ( progressDuringAdjustment != null ) )
				{
					setSliderValueWithoutChangeEvent( progressDuringAdjustment );
				}
*/
				updateTimes();
			};

			_jsliderKeyListener = new KeyAdapter() {
				@Override
				public void keyPressed(KeyEvent evt)
				{
					Integer progressDuringAdjustment = _progressDuringAdjustment;
					if( (progressDuringAdjustment != null) &&
						( evt.getKeyCode() == KeyEvent.VK_ESCAPE ) )
					{
//						jSlider.setValueIsAdjusting(false);
						TimeSliderJPanel.this.updateSliderValue(progressDuringAdjustment);
//						_progressDuringAdjustment = null;
						setCancelled(true);
					}
				}
			};

			jSlider.addChangeListener(_jsliderValueListener);
			jSlider.addKeyListener(_jsliderKeyListener);
		}
	}

	protected void removeInternalListeners()
	{
		if( _jsliderValueListener != null )
		{
			jSlider.removeChangeListener(_jsliderValueListener);
			_jsliderValueListener = null;
		}

		if( _jsliderKeyListener != null )
		{
			jSlider.removeKeyListener(_jsliderKeyListener);
			_jsliderKeyListener = null;
		}
	}

	protected void updateTimes()
	{
		int value = jSlider.getValue();

		int ms = getMs(value);
		int remaining = _totalTimeMs - ms;

		updateTimes( jL_elapsedTime, ms );
		updateTimes( jL_remainingTime, remaining );
	}

	protected int getMs( int index )
	{
		long result = ( ((long) index) * _totalTimeMs )  / _sliderValueRange;

		return( (int) result );
	}

	protected void updateTimes( JLabel label, int ms )
	{
		label.setText(getTimeStr(ms));
	}

	protected String getTimeStr(int ms)
	{
		return( TimeFunctions.instance().getTimeStr(ms) );
	}

	protected void preventFromChange( boolean value )
	{
		_preventFromChange = value;
	}

	public void updateSliderValue( int value )
	{
		SwingUtilities.invokeLater( () -> {
			if( ! jSlider.getValueIsAdjusting() || isCancelled() )
			{
				setSliderValueWithoutChangeEvent( value );

				updateTimes();
			}
			else
				_progressDuringAdjustment = value;
		});
	}

	protected void setSliderValueWithoutChangeEvent( int value )
	{
		preventFromChange(true);
		jSlider.setValue( value );
		preventFromChange(false);
		jSlider.repaint();
	}

	public void updateRangeAndTime( int range, int totalTimeMs )
	{
		_totalTimeMs = totalTimeMs;
		_sliderValueRange = range;

		SwingUtilities.invokeLater( () -> {
			updateTimes( jL_totalTime, _totalTimeMs );

			if( jSlider.getValueIsAdjusting() )
				jSlider.setValueIsAdjusting(false);
			preventFromChange(true);
			jSlider.setMinimum(0);
			jSlider.setMaximum(range);
			preventFromChange(false);
//			_progressDuringAdjustment = null;
		});

		updateSliderValue(0);
	}

	public void setSliderEnabled( boolean value )
	{
		SwingUtilities.invokeLater(
			() ->
				jSlider.setEnabled(value)
		);
	}

	public void setListener(Consumer<Integer> _listener) {
		this._listener = _listener;
	}

	@Override
	public void setComponentMapper(ComponentMapper compMapper)
	{
		jL_elapsedTime = compMapper.mapComponent( jL_elapsedTime );
		jL_remainingTime = compMapper.mapComponent( jL_remainingTime );
		jL_totalTime = compMapper.mapComponent( jL_totalTime );
		jPanel1 = compMapper.mapComponent( jPanel1 );
		jSlider = compMapper.mapComponent( jSlider );

		super.setComponentMapper(compMapper);
	}

	public int getValue()
	{
		return( jSlider.getValue() );
	}
}
