/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.frojasg1.general.desktop.view.panels.volume;

import com.frojasg1.applications.common.components.resizecomp.MapResizeRelocateComponentItem;
import com.frojasg1.applications.common.components.resizecomp.ResizeRelocateItem;
import com.frojasg1.general.ExecutionFunctions;
import com.frojasg1.general.desktop.view.buttons.ResizableImageJToggleButton;
import com.frojasg1.general.desktop.view.zoom.mapper.ComponentMapper;
import com.frojasg1.general.desktop.view.zoom.mapper.ComposedComponent;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.util.function.Consumer;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 */
public class VolumeJPanel extends com.frojasg1.general.desktop.view.panels.CustomJPanelBase
	implements ComposedComponent {

	protected MapResizeRelocateComponentItem _mapRRCI = null;

	protected ChangeListener _sliderListener = null;
	protected ActionListener _toggleButtonListener = null;

	protected Consumer<ChangeVolumeEvent> _changeVolumeListener = null;

	protected boolean _changedByProgram = false;

	/**
	 * Creates new form VolumePanel
	 */
	public VolumeJPanel(Consumer<ChangeVolumeEvent> changeVolumeListener,
						int mindB, int maxdB ) {
		super.init();

		_changeVolumeListener = changeVolumeListener;

		initComponents();

		initOwnComponents();

		_mapRRCI = createResizeRelocateInfo();

		setVolumeBoundsIndB( mindB, maxdB );
	}

	protected void initOwnComponents()
	{
		jTB_mute.setToolTipText( VolumePanelInternationalTexts.instance().getInternationalString(VolumePanelInternationalTexts.CONF_MUTE_BUTTON_MUTE_HINT));
	}

	@Override
	public MapResizeRelocateComponentItem getResizeRelocateInfo()
	{
		if( _mapRRCI == null )
		{
			_mapRRCI = createResizeRelocateInfo();
		}

		return( _mapRRCI );
	}

	@Override
	public Dimension getInternalSize()
	{
		return( jPanel1.getSize() );
	}

	@Override
	public Rectangle getInternalBounds()
	{
		return( jPanel1.getBounds() );
	}

	protected MapResizeRelocateComponentItem createResizeRelocateInfo()
	{
		MapResizeRelocateComponentItem mapRRCI = new MapResizeRelocateComponentItem();

		try
		{
			boolean postponeInitialization = true;
			mapRRCI.putResizeRelocateComponentItem( this, ResizeRelocateItem.FILL_WHOLE_PARENT, postponeInitialization );
			mapRRCI.putResizeRelocateComponentItem( jPanel1, ResizeRelocateItem.FILL_WHOLE_PARENT );
			mapRRCI.putResizeRelocateComponentItem( jTB_mute, ResizeRelocateItem.MOVE_MID_HORIZONTAL_SIDE_PROPORTIONAL );
			mapRRCI.putResizeRelocateComponentItem( jL_value, ResizeRelocateItem.FILL_WHOLE_WIDTH +
																ResizeRelocateItem.MOVE_VERTICAL_SIDES_PROPORTIONAL );
			mapRRCI.putResizeRelocateComponentItem( jS_volumeControl, ResizeRelocateItem.MOVE_ALL_SIDES_PROPORTIONAL );
		}
		catch( Throwable th )
		{
			th.printStackTrace();
		}

		return( mapRRCI );
	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jL_value = new javax.swing.JLabel();
        jTB_mute = new javax.swing.JToggleButton();
        jS_volumeControl = new javax.swing.JSlider();

        setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jL_value.setForeground(new java.awt.Color(68, 68, 68));
        jL_value.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_value.setText("jLabel1");
        jPanel1.add(jL_value);
        jL_value.setBounds(1, 20, 50, 16);

        jTB_mute.setMaximumSize(new java.awt.Dimension(20, 20));
        jTB_mute.setMinimumSize(new java.awt.Dimension(5, 5));
        jTB_mute.setName("name=jTB_mute,icon=com/frojasg1/generic/resources/music/music.off.black.png"); // NOI18N
        jTB_mute.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.add(jTB_mute);
        jTB_mute.setBounds(10, 0, 25, 25);

        jS_volumeControl.setOrientation(javax.swing.JSlider.VERTICAL);
        jS_volumeControl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(jS_volumeControl);
        jS_volumeControl.setBounds(10, 40, 30, 105);

        add(jPanel1);
        jPanel1.setBounds(0, 0, 50, 150);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jL_value;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jS_volumeControl;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JToggleButton jTB_mute;
    // End of variables declaration//GEN-END:variables

	@Override
	public void setComponentMapper(ComponentMapper compMapper) {
		jL_value = compMapper.mapComponent( jL_value );
		jPanel1 = compMapper.mapComponent( jPanel1 );
		jSlider1 = compMapper.mapComponent( jSlider1 );
		jS_volumeControl = compMapper.mapComponent(jS_volumeControl );
		jTB_mute = compMapper.mapComponent( jTB_mute );

		super.setComponentMapper(compMapper);

		addListeners();
	}

	protected void addListeners()
	{
		if( _sliderListener == null )
		{
			_sliderListener = evt -> valueChanged();
			jS_volumeControl.addChangeListener(_sliderListener);
		}

		if( _toggleButtonListener == null )
		{
			_toggleButtonListener = evt -> toggleButtonChanged();
			jTB_mute.addActionListener(_toggleButtonListener);
		}
	}

	@Override
	public void releaseResources()
	{
		ExecutionFunctions.instance().safeMethodExecution( this::removeListeners );
		_changeVolumeListener = null;
	}

	protected void removeListeners()
	{
		jS_volumeControl.removeChangeListener(_sliderListener );
		jTB_mute.removeActionListener(_toggleButtonListener);
	}

	public void setVolumeIndB( float volumeIndB )
	{
		try
		{
			_changedByProgram = true;

			jS_volumeControl.setValue( (int) volumeIndB );
			updateValueLabel();
		}
		finally
		{
			_changedByProgram = false;
		}
	}

	public int getVolumeIndB()
	{
		return( jS_volumeControl.getValue() );
	}

	public boolean isMuted()
	{
		return( jTB_mute.isSelected() );
	}

	public void setMute( boolean value )
	{
		try
		{
			_changedByProgram = true;
			jTB_mute.setSelected(value);
		}
		finally
		{
			_changedByProgram = false;
		}
	}

	public void setVolumeBoundsIndB( int mindB, int maxdB )
	{
//		int value = getVolumeIndB();

		jS_volumeControl.setMinimum(mindB);
		jS_volumeControl.setMaximum(maxdB);

//		setVolumeIndB(value);
	}

	public int getLinearVolume()
	{
		return( (int) Math.round( Math.pow( 10, getVolumeIndB() / 20d ) ) );
	}

	protected void valueChanged()
	{
		updateValueLabel();
		if( !_changedByProgram )
			notifyChangeVolumeListener();
	}

	protected void updateValueLabel()
	{
		jL_value.setText( getValueLabelText() );
	}

	protected String getValueLabelText()
	{
		int value = jS_volumeControl.getValue();
		String text = String.valueOf(value) + " dB";

		return( text );
	}

	public ChangeVolumeEvent createChangeVolumeEvent()
	{
		ChangeVolumeEvent result = new ChangeVolumeEvent();
		
		result.setIsMuted( isMuted() );
		result.setVolumeIndB( getVolumeIndB() );

		return( result );
	}

	protected void notifyChangeVolumeListener()
	{
		if( _changeVolumeListener != null )
			_changeVolumeListener.accept( createChangeVolumeEvent() );
	}

	protected void toggleButtonToggleAspect()
	{
		String hintLabel;
		String imageResource;
		
		if( !jTB_mute.isSelected() )
		{
			hintLabel = VolumePanelInternationalTexts.CONF_MUTE_BUTTON_MUTE_HINT;
			imageResource = "com/frojasg1/generic/resources/music/music.off.black.png";
		}
		else
		{
			hintLabel = VolumePanelInternationalTexts.CONF_MUTE_BUTTON_ACTIVATE_HINT;
			imageResource = "com/frojasg1/generic/resources/music/music.on.black.png";
		}

		jTB_mute.setToolTipText(VolumePanelInternationalTexts.instance().getInternationalString(hintLabel) );
		( (ResizableImageJToggleButton) jTB_mute ).setImageResource(imageResource);
	}

	protected void toggleButtonChanged()
	{
		toggleButtonToggleAspect();
		if( !_changedByProgram )
			notifyChangeVolumeListener();
	}
}
