/* 
 * Copyright (C) 2021 Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 */
package com.frojasg1.general.desktop.view.panels.languages;

import com.frojasg1.applications.common.configuration.application.BaseApplicationConfigurationInterface;
import com.frojasg1.general.ArrayFunctions;
import com.frojasg1.general.CollectionFunctions;
import com.frojasg1.general.desktop.view.combobox.utils.ComboBoxFunctions;
import com.frojasg1.general.desktop.view.zoom.mapper.ComponentMapper;
import com.frojasg1.general.desktop.view.zoom.mapper.InternallyMappedComponent;
import com.frojasg1.general.language.LanguageResources;
import com.frojasg1.general.locale.ExtendedLocale;
import com.frojasg1.general.locale.LocaleFunctions;
import com.frojasg1.generic.GenericFunctions;
import java.io.File;
import java.util.List;
import java.util.Locale;
import javax.swing.JComboBox;

/**
 *
 * @author Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 */
public class LanguagesConfigurationJPanel extends com.frojasg1.general.desktop.view.panels.CustomJPanelBase implements InternallyMappedComponent {

	protected ConfigurationServerForLanguage _configurationServerForLanguage = null;
	protected BaseApplicationConfigurationInterface _applicationConfiguration = null;

	protected String[] _arrayOfLanguages = null;

	protected boolean _localeSelectionChangedByApplication = false;

	protected boolean a_initializing = true;

	/**
	 * Creates new form LanguagesConfigurationJPanel
	 */
	public LanguagesConfigurationJPanel( ConfigurationServerForLanguage confServer,
											BaseApplicationConfigurationInterface applicationConfiguration ) {
		super.init();


		_configurationServerForLanguage = confServer;
		_applicationConfiguration = applicationConfiguration;

		initComponents();
	}

	public void M_initializeComponentContents()
	{
		a_initializing = true;

		changeLanguageOfLocaleComboBoxes( getAppliConf().getLanguage(), null );

//		jTf_additionalLanguage.setText( getAppliConf().getAdditionalLanguage() );
		M_fillLanguageComboBox();
		fillWebLanguageComboBoxes();
		jTP_additionalLanguageFoder.setText( M_getAdditionalLanguageFolder( jTf_additionalLanguage.getText() ) );

		a_initializing=false;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jP_applicationLanguage = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTP_additionalLanguageFoder = new javax.swing.JTextPane();
        jCB_webLanguage2 = new javax.swing.JComboBox<>();
        jLbl_webLanguage2 = new javax.swing.JLabel();
        jLbl_additionalLanguageFolder = new javax.swing.JLabel();
        jTf_additionalLanguage = new javax.swing.JTextField();
        jLbl_additionalLanguage = new javax.swing.JLabel();
        jCb_language = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JSeparator();
        jLbl_language = new javax.swing.JLabel();
        jB_addLanguage = new javax.swing.JButton();
        jCB_webLanguage1 = new javax.swing.JComboBox<>();
        jLbl_webLanguage1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLbl_javaLocaleLanguage_additional = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLbl_javaLocaleLanguage_additional1 = new javax.swing.JLabel();
        jCb_locale1 = new javax.swing.JComboBox();
        jCb_locale2 = new javax.swing.JComboBox();

        setLayout(null);

        jP_applicationLanguage.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Application Language"));
        jP_applicationLanguage.setName("jP_applicationLanguage"); // NOI18N
        jP_applicationLanguage.setLayout(null);

        jTP_additionalLanguageFoder.setEditable(false);
        jScrollPane1.setViewportView(jTP_additionalLanguageFoder);

        jP_applicationLanguage.add(jScrollPane1);
        jScrollPane1.setBounds(30, 230, 520, 50);

        jCB_webLanguage2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jP_applicationLanguage.add(jCB_webLanguage2);
        jCB_webLanguage2.setBounds(360, 170, 90, 20);

        jLbl_webLanguage2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_webLanguage2.setText("Web language");
        jLbl_webLanguage2.setName("jLbl_webLanguage2"); // NOI18N
        jP_applicationLanguage.add(jLbl_webLanguage2);
        jLbl_webLanguage2.setBounds(460, 170, 100, 20);

        jLbl_additionalLanguageFolder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_additionalLanguageFolder.setText("Additional Language Folder:");
        jLbl_additionalLanguageFolder.setToolTipText("");
        jLbl_additionalLanguageFolder.setName("jLbl_additionalLanguageFolder"); // NOI18N
        jP_applicationLanguage.add(jLbl_additionalLanguageFolder);
        jLbl_additionalLanguageFolder.setBounds(150, 200, 400, 20);

        jTf_additionalLanguage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTf_additionalLanguageFocusLost(evt);
            }
        });
        jTf_additionalLanguage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTf_additionalLanguageKeyReleased(evt);
            }
        });
        jP_applicationLanguage.add(jTf_additionalLanguage);
        jTf_additionalLanguage.setBounds(220, 140, 60, 20);

        jLbl_additionalLanguage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_additionalLanguage.setText("Additional Language");
        jLbl_additionalLanguage.setName("jLbl_additionalLanguage"); // NOI18N
        jP_applicationLanguage.add(jLbl_additionalLanguage);
        jLbl_additionalLanguage.setBounds(290, 140, 240, 20);

        jCb_language.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCb_language.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCb_languageActionPerformed(evt);
            }
        });
        jP_applicationLanguage.add(jCb_language);
        jCb_language.setBounds(200, 40, 80, 20);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jP_applicationLanguage.add(jSeparator4);
        jSeparator4.setBounds(340, 170, 10, 20);

        jLbl_language.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_language.setText("Application language");
        jLbl_language.setName("jLbl_language"); // NOI18N
        jP_applicationLanguage.add(jLbl_language);
        jLbl_language.setBounds(290, 40, 240, 20);

        jB_addLanguage.setText("Add language");
        jB_addLanguage.setEnabled(false);
        jB_addLanguage.setName("jB_addLanguage"); // NOI18N
        jB_addLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_addLanguageActionPerformed(evt);
            }
        });
        jP_applicationLanguage.add(jB_addLanguage);
        jB_addLanguage.setBounds(30, 140, 130, 23);

        jCB_webLanguage1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCB_webLanguage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_webLanguage1ActionPerformed(evt);
            }
        });
        jP_applicationLanguage.add(jCB_webLanguage1);
        jCB_webLanguage1.setBounds(360, 70, 90, 20);

        jLbl_webLanguage1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_webLanguage1.setText("Web language");
        jLbl_webLanguage1.setName("jLbl_webLanguage1"); // NOI18N
        jP_applicationLanguage.add(jLbl_webLanguage1);
        jLbl_webLanguage1.setBounds(460, 70, 100, 20);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jP_applicationLanguage.add(jSeparator3);
        jSeparator3.setBounds(340, 70, 10, 20);

        jLbl_javaLocaleLanguage_additional.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_javaLocaleLanguage_additional.setText("Locale");
        jLbl_javaLocaleLanguage_additional.setName("jLbl_javaLocaleLanguage_additional"); // NOI18N
        jP_applicationLanguage.add(jLbl_javaLocaleLanguage_additional);
        jLbl_javaLocaleLanguage_additional.setBounds(290, 70, 240, 20);
        jP_applicationLanguage.add(jSeparator1);
        jSeparator1.setBounds(20, 120, 530, 10);

        jLbl_javaLocaleLanguage_additional1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLbl_javaLocaleLanguage_additional1.setText("Locale");
        jLbl_javaLocaleLanguage_additional1.setName("jLbl_javaLocaleLanguage_additional"); // NOI18N
        jP_applicationLanguage.add(jLbl_javaLocaleLanguage_additional1);
        jLbl_javaLocaleLanguage_additional1.setBounds(290, 170, 240, 20);

        jCb_locale1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCb_locale1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCb_locale1ActionPerformed(evt);
            }
        });
        jP_applicationLanguage.add(jCb_locale1);
        jCb_locale1.setBounds(30, 70, 250, 20);

        jCb_locale2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCb_locale2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCb_locale2ActionPerformed(evt);
            }
        });
        jP_applicationLanguage.add(jCb_locale2);
        jCb_locale2.setBounds(30, 170, 250, 20);

        add(jP_applicationLanguage);
        jP_applicationLanguage.setBounds(10, 10, 570, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void jTf_additionalLanguageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTf_additionalLanguageFocusLost
        // TODO add your handling code here:

        updateLanguageCombobox();
    }//GEN-LAST:event_jTf_additionalLanguageFocusLost

    private void jTf_additionalLanguageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTf_additionalLanguageKeyReleased
        // TODO add your handling code here:

        //		M_fillLanguageComboBox();
        updateLanguageCombobox();
    }//GEN-LAST:event_jTf_additionalLanguageKeyReleased

    private void jCb_languageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCb_languageActionPerformed
        // TODO add your handling code here:

        String language = getSelectedLanguage();
        if( language != null )
			localChangeLanguage( language );
    }//GEN-LAST:event_jCb_languageActionPerformed

    private void jB_addLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_addLanguageActionPerformed
        // TODO add your handling code here:

        if( M_hasToCreateAdditionalLanguageFolder() )
        {
            String localeCode = getSelectedLocaleCode( jCb_locale2 );

            if( localeCode != null )
            GenericFunctions.instance().getObtainAvailableLanguages().newLanguageSetToConfiguration(jTf_additionalLanguage.getText(),
                localeCode, getSelection(jCB_webLanguage2));

            M_createFolderAndCopyLanguageConfigurationFilesFromEnglish();
        }

        M_fillLanguageComboBox();

		this._configurationServerForLanguage.addLanguageActionPerformed(jTf_additionalLanguage.getText());
    }//GEN-LAST:event_jB_addLanguageActionPerformed

    private void jCb_locale1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCb_locale1ActionPerformed
        // TODO add your handling code here:

        updateCurrentLocaleAndWebLanguage();

    }//GEN-LAST:event_jCb_locale1ActionPerformed

    private void jCb_locale2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCb_locale2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCb_locale2ActionPerformed

    private void jCB_webLanguage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_webLanguage1ActionPerformed
        // TODO add your handling code here:

        updateCurrentLocaleAndWebLanguage();

    }//GEN-LAST:event_jCB_webLanguage1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_addLanguage;
    private javax.swing.JComboBox<String> jCB_webLanguage1;
    private javax.swing.JComboBox<String> jCB_webLanguage2;
    private javax.swing.JComboBox jCb_language;
    private javax.swing.JComboBox jCb_locale1;
    private javax.swing.JComboBox jCb_locale2;
    private javax.swing.JLabel jLbl_additionalLanguage;
    private javax.swing.JLabel jLbl_additionalLanguageFolder;
    private javax.swing.JLabel jLbl_javaLocaleLanguage_additional;
    private javax.swing.JLabel jLbl_javaLocaleLanguage_additional1;
    private javax.swing.JLabel jLbl_language;
    private javax.swing.JLabel jLbl_webLanguage1;
    private javax.swing.JLabel jLbl_webLanguage2;
    private javax.swing.JPanel jP_applicationLanguage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextPane jTP_additionalLanguageFoder;
    private javax.swing.JTextField jTf_additionalLanguage;
    // End of variables declaration//GEN-END:variables

	protected void updateCurrentLocaleAndWebLanguage()
	{
        if( !_localeSelectionChangedByApplication )
        {
            String language = (String) jCb_language.getSelectedItem();

            String newLocaleCode = getSelectedLocaleCode( jCb_locale1 );

            if( ( language != null ) && ( newLocaleCode != null ) )
            GenericFunctions.instance().getObtainAvailableLanguages().setLocaleLanguageOfLanguage( language, newLocaleCode, getSelection(jCB_webLanguage1) );
        }
	}


	protected void localChangeLanguage( String language )
	{
		changeLanguageOfLocaleComboBoxes( language );
		changeSelectionOfWebLanguages( language );

		_configurationServerForLanguage.localChangeLanguage(language);
	}

	protected void changeSelectionOfWebLanguages( String language )
	{
		String webLanguage = "Espanyol";
		if( language != null )
			webLanguage = GenericFunctions.instance().getObtainAvailableLanguages().getWebLanguageName(language);

		jCB_webLanguage1.setSelectedItem( webLanguage );
	}


	protected void updateLanguageCombobox()
	{
		jTP_additionalLanguageFoder.setText( M_getAdditionalLanguageFolder( jTf_additionalLanguage.getText() ) );

		boolean buttonEnabled = ( ( jTf_additionalLanguage.getText().length() > 0 ) &&
									( ArrayFunctions.instance().getFirstIndexOfEquals(_arrayOfLanguages, jTf_additionalLanguage.getText() ) < 0 ) );
		jB_addLanguage.setEnabled(buttonEnabled);
	}

	protected void fillWebLanguageComboBoxes()
	{
		String[] webLanguages = GenericFunctions.instance().getObtainAvailableLanguages().getListOfAvailableWebLanguageNames().toArray( new String[0] );
		String selection = GenericFunctions.instance().getObtainAvailableLanguages().getWebLanguageName( getAppliConf().getLanguage() );

		_localeSelectionChangedByApplication = true;
		ComboBoxFunctions.instance().fillComboBox(jCB_webLanguage1, webLanguages, selection);
		_localeSelectionChangedByApplication = false;

		selection = GenericFunctions.instance().getObtainAvailableLanguages().getDefaultWebLanguage();
		ComboBoxFunctions.instance().fillComboBox(jCB_webLanguage2, webLanguages, selection);
	}

	protected void M_fillLanguageComboBox()
	{
		_arrayOfLanguages = GenericFunctions.instance().getObtainAvailableLanguages().getTotalArrayOfAvailableLanguages();

		if( (!a_initializing) && ( jCb_language.getItemCount() == _arrayOfLanguages.length ) )
		{}
		else
		{
			String language = null;
			if( a_initializing )
				language = getAppliConf().getLanguage();
			else
				language = (String) jCb_language.getSelectedItem();

			ComboBoxFunctions.instance().fillComboBox(jCb_language, _arrayOfLanguages, language);
		}
	}

	public String getSelectedLanguage()
	{
		String result = null;

		int selectedIndex = jCb_language.getSelectedIndex();

        if( selectedIndex >= 0 )
            result = (String) jCb_language.getItemAt( selectedIndex );

		return( result );
	}

	protected String M_getAdditionalLanguageFolder( String language )
	{
		return( ( (language==null) || (language.length()==0 ) ) ? "" : getAppliConf().getDefaultLanguageConfigurationFolder( language ) );
	}

	protected boolean M_hasToCreateAdditionalLanguageFolder()
	{
		boolean result = false;
		
		String language = jTf_additionalLanguage.getText();
		if( (language != null) && (! language.equals( "CAT" ) ) )		// el català ja està traduït al .jar
		{
			String folderName = M_getAdditionalLanguageFolder( language );
			File directory = new File( folderName );
			result = ! directory.exists();
		}

		return( result );
	}

	protected void M_createFolderAndCopyLanguageConfigurationFilesFromEnglish()
	{
		String language = jTf_additionalLanguage.getText();
		
		File directory = new File( M_getAdditionalLanguageFolder( language ) );
		boolean ok = directory.mkdirs();

//		if( ok )
		{
			LanguageResources.instance().copyLanguageConfigurationFilesFromJar( directory.getAbsolutePath() );
		}
	}

	protected String getSelectedLocaleCode( JComboBox jCb_locale )
	{
		String result = null;
		if( jCb_locale != null )
		{
			Object selectedItem = jCb_locale.getSelectedItem();
			if( selectedItem instanceof ExtendedLocale )
			{
				ExtendedLocale el = (ExtendedLocale) selectedItem;
				result = el.getLocale().toString();
			}
		}
		return( result );
	}

	protected void changeLanguageOfLocaleComboBoxes( String language )
	{
		changeLanguageOfLocaleComboBoxes( language, getSelectedLocaleCode( jCb_locale2 ) );
	}

	protected void changeLanguageOfLocaleComboBoxes( String language, String localeCodeForAdditionalLanguage )
	{
		String localeCode = getLocaleCode(language);

		fillLocaleComboboxes( language,
							localeCode,
							 localeCodeForAdditionalLanguage );
	}

	protected Locale getLocale( String language )
	{
		Locale result = null;
		if( language != null )
			result = GenericFunctions.instance().getObtainAvailableLanguages().getLocaleOfLanguage(language);

		return( result );
	}

	protected String getLocaleCode( String language )
	{
		String result = null;

		Locale locale = getLocale( language );
		if( locale != null )
			result = locale.toString();

		return( result );
	}

	protected void fillLocaleComboboxes( String language,
										String selectedLocaleCode1,
										String selectedLocaleCode2 )
	{
		Locale newLocale = GenericFunctions.instance().getObtainAvailableLanguages().getLocaleOfLanguage(language);

		if( newLocale != null )
		{
			ExtendedLocale.setCurrentLocale( newLocale );
			fillInLocaleCombobox( jCb_locale1, selectedLocaleCode1, newLocale );
			fillInLocaleCombobox( jCb_locale2, selectedLocaleCode2, newLocale );
		}
	}

	protected void fillInLocaleCombobox( JComboBox jCb_locale, String selectedLocaleCode,
										Locale localeForOutput )
	{
		List<ExtendedLocale> list = getListOfExtendedLocaleForCombobox( localeForOutput );
		ExtendedLocale[] arrayOfExtendedLocales = list.toArray( new ExtendedLocale[0] );

		jCb_locale.setModel(new javax.swing.DefaultComboBoxModel(arrayOfExtendedLocales));

		changeSelectedLocaleOfCombobox( jCb_locale, selectedLocaleCode );
	}

	protected List<ExtendedLocale> getListOfExtendedLocaleForCombobox( Locale localeForOutput )
	{
		List<ExtendedLocale> result = LocaleFunctions.instance().getListOfFixedLocales();

		List<ExtendedLocale> list = LocaleFunctions.instance().getListOfLocales();
		CollectionFunctions.instance().sortNoCaseSensitive(list, localeForOutput);

		result.addAll( list );

		return( result );
	}

	protected void changeSelectedLocaleOfCombobox( JComboBox jCb_locale, String selectedLocaleCode )
	{
		ExtendedLocale el = LocaleFunctions.instance().getExtendedLocale( selectedLocaleCode );
		if( el == null )
			el = LocaleFunctions.instance().getDefaultLocale();

		if( el != null )
		{
			_localeSelectionChangedByApplication = true;
			jCb_locale.setSelectedItem(el);
			_localeSelectionChangedByApplication = false;
		}
	}

	protected BaseApplicationConfigurationInterface getAppliConf()
	{
		return( _applicationConfiguration );
	}

	protected String getSelection( JComboBox combo )
	{
		return( (String) combo.getSelectedItem() );
	}
/*
	public void translateMappedComponents(ComponentMapper compMapper)
	{
		jB_addLanguage = compMapper.mapComponent(jB_addLanguage);
		jCB_webLanguage1 = compMapper.mapComponent(jCB_webLanguage1);
		jCB_webLanguage2 = compMapper.mapComponent(jCB_webLanguage2);
		jCb_language = compMapper.mapComponent(jCb_language);
		jCb_locale1 = compMapper.mapComponent(jCb_locale1);
		jCb_locale2 = compMapper.mapComponent(jCb_locale2);
		jLbl_additionalLanguage = compMapper.mapComponent(jLbl_additionalLanguage);
		jLbl_additionalLanguageFolder = compMapper.mapComponent(jLbl_additionalLanguageFolder);
		jLbl_javaLocaleLanguage_additional = compMapper.mapComponent(jLbl_javaLocaleLanguage_additional);
		jLbl_javaLocaleLanguage_additional1 = compMapper.mapComponent(jLbl_javaLocaleLanguage_additional1);
		jLbl_language = compMapper.mapComponent(jLbl_language);
		jLbl_webLanguage1 = compMapper.mapComponent(jLbl_webLanguage1);
		jLbl_webLanguage2 = compMapper.mapComponent(jLbl_webLanguage2);
		jP_applicationLanguage = compMapper.mapComponent(jP_applicationLanguage);
		jScrollPane1 = compMapper.mapComponent(jScrollPane1);
		jSeparator1 = compMapper.mapComponent(jSeparator1);
		jSeparator3 = compMapper.mapComponent(jSeparator3);
		jSeparator4 = compMapper.mapComponent(jSeparator4);
		jTP_additionalLanguageFoder = compMapper.mapComponent(jTP_additionalLanguageFoder);
		jTf_additionalLanguage = compMapper.mapComponent(jTf_additionalLanguage);
	}
*/
	@Override
	public void setComponentMapper(ComponentMapper compMapper) {
		jB_addLanguage = compMapper.mapComponent(jB_addLanguage);
		jCB_webLanguage1 = compMapper.mapComponent(jCB_webLanguage1);
		jCB_webLanguage2 = compMapper.mapComponent(jCB_webLanguage2);
		jCb_language = compMapper.mapComponent(jCb_language);
		jCb_locale1 = compMapper.mapComponent(jCb_locale1);
		jCb_locale2 = compMapper.mapComponent(jCb_locale2);
		jLbl_additionalLanguage = compMapper.mapComponent(jLbl_additionalLanguage);
		jLbl_additionalLanguageFolder = compMapper.mapComponent(jLbl_additionalLanguageFolder);
		jLbl_javaLocaleLanguage_additional = compMapper.mapComponent(jLbl_javaLocaleLanguage_additional);
		jLbl_javaLocaleLanguage_additional1 = compMapper.mapComponent(jLbl_javaLocaleLanguage_additional1);
		jLbl_language = compMapper.mapComponent(jLbl_language);
		jLbl_webLanguage1 = compMapper.mapComponent(jLbl_webLanguage1);
		jLbl_webLanguage2 = compMapper.mapComponent(jLbl_webLanguage2);
		jP_applicationLanguage = compMapper.mapComponent(jP_applicationLanguage);
		jScrollPane1 = compMapper.mapComponent(jScrollPane1);
		jSeparator1 = compMapper.mapComponent(jSeparator1);
		jSeparator3 = compMapper.mapComponent(jSeparator3);
		jSeparator4 = compMapper.mapComponent(jSeparator4);
		jTP_additionalLanguageFoder = compMapper.mapComponent(jTP_additionalLanguageFoder);
		jTf_additionalLanguage = compMapper.mapComponent(jTf_additionalLanguage);

		super.setComponentMapper(compMapper);
	}
}
