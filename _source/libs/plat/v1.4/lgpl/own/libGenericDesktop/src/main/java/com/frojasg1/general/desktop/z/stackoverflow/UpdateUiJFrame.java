/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.frojasg1.general.desktop.z.stackoverflow;

import java.awt.Component;
import java.awt.Container;
import java.util.function.Function;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.plaf.basic.BasicComboPopup;

/**
 *
 * @author Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 */
public class UpdateUiJFrame extends javax.swing.JFrame {

	/**
	 * Creates new form UpdateUiJFrame
	 */
	public UpdateUiJFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMI_updateUIs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(jComboBox1);
        jComboBox1.setBounds(80, 95, 240, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 400, 275);

        jMenu1.setText("File");

        jMenuItem1.setText("Another longer menu option");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMI_updateUIs.setText("Update UIs");
        jMI_updateUIs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_updateUIsActionPerformed(evt);
            }
        });
        jMenu2.add(jMI_updateUIs);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMI_updateUIsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_updateUIsActionPerformed
        // TODO add your handling code here:

		browseComponentHierarchy( this, this::processComponent );
    }//GEN-LAST:event_jMI_updateUIsActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(UpdateUiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(UpdateUiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(UpdateUiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(UpdateUiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new UpdateUiJFrame().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JMenuItem jMI_updateUIs;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

	public void browseComponentHierarchy( Component comp, Function<Component, Component> executeToComp )
	{
		if( comp != null )
		{
			if( executeToComp != null )
			{
				Component relatedComponent = executeToComp.apply(comp);
				if( relatedComponent != null )
					browseComponentHierarchy( relatedComponent, executeToComp );
			}

			if( ( comp instanceof JFrame ) ||
				( comp instanceof JRootPane ) ||
				( comp instanceof JLayeredPane ) ||
				( comp instanceof JPanel ) ||
				( comp instanceof JInternalFrame )  ||
				( comp instanceof Container ) )
			{
				if( comp instanceof JSplitPane	)
				{
					JSplitPane jsp = (JSplitPane) comp;
					if( jsp.getOrientation() == JSplitPane.HORIZONTAL_SPLIT )
					{
						browseComponentHierarchy( jsp.getLeftComponent(), executeToComp );
						browseComponentHierarchy( jsp.getRightComponent(), executeToComp );
					}
					else if( jsp.getOrientation() == JSplitPane.VERTICAL_SPLIT )
					{
						browseComponentHierarchy( jsp.getTopComponent(), executeToComp );
						browseComponentHierarchy( jsp.getBottomComponent(), executeToComp );
					}
				}

				if( comp instanceof JTabbedPane )
				{
					JTabbedPane tabbedPane = (JTabbedPane) comp;
					for( int ii=0; ii<tabbedPane.getTabCount(); ii++ )
					{
						browseComponentHierarchy( tabbedPane.getComponentAt(ii), executeToComp );
					}
				}
				else if( comp instanceof Container )
				{
					Container contnr = (Container) comp;

					if( comp instanceof JMenu )
						browseComponentHierarchy( ( ( JMenu ) comp ).getPopupMenu(), executeToComp );

					for( int ii=0; ii<contnr.getComponentCount(); ii++ )
					{
						browseComponentHierarchy( contnr.getComponent(ii), executeToComp );
					}
				}

				if( comp instanceof JComboBox )
				{
					JComboBox combo = (JComboBox) comp;
					BasicComboPopup popup = (BasicComboPopup) combo.getUI().getAccessibleChild(combo, 0);

					browseComponentHierarchy( popup, executeToComp );
				}
			}
		}
	}

	protected Component processComponent( Component comp )
	{
		if( comp instanceof JComponent )
			( ( JComponent ) comp ).updateUI();

		return( null );
	}
}
