/* 
 * Copyright (C) 2021 Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 */
package com.frojasg1.chesspdfbrowser.view.chess.regex.impl;

import com.frojasg1.applications.common.components.internationalization.window.exceptions.ValidationException;
import com.frojasg1.applications.common.components.resizecomp.MapResizeRelocateComponentItem;
import com.frojasg1.applications.common.components.resizecomp.ResizeRelocateItem;
import com.frojasg1.applications.common.configuration.InternationalizedStringConf;
import com.frojasg1.applications.common.configuration.imp.InternationalizedStringConfImp;
import com.frojasg1.chesspdfbrowser.engine.configuration.ApplicationConfiguration;
import com.frojasg1.chesspdfbrowser.view.chess.regex.RegexNameView;
import com.frojasg1.general.ExecutionFunctions;
import com.frojasg1.general.desktop.view.combobox.utils.ComboBoxFunctions;
import com.frojasg1.general.desktop.view.zoom.mapper.ComponentMapper;
import com.frojasg1.general.desktop.view.zoom.mapper.InternallyMappedComponent;
import java.awt.Dimension;

/**
 *
 * @author Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 */
public class TagRegexNameJPanel extends com.frojasg1.general.desktop.view.panels.CustomJPanelBase
	implements InternallyMappedComponent, InternationalizedStringConf, RegexNameView
{
	public static final String GLOBAL_CONF_FILE_NAME = "TagRegexNameJPanel.properties";

	protected static final String CONF_REGEX_TAG_NAME_CANNOT_BE_EMPTY = "REGEX_TAG_NAME_CANNOT_BE_EMPTY";
	protected static final String CONF_REGEX_TAG_OFFSET_MUST_BE_A_VALID_NUMBER = "REGEX_TAG_OFFSET_MUST_BE_A_VALID_NUMBER";

	protected InternationalizedStringConfImp _internationalizedStringConf = new InternationalizedStringConfImp( GLOBAL_CONF_FILE_NAME,
																											ApplicationConfiguration.instance().getInternationalPropertiesPathInJar() );

	protected MapResizeRelocateComponentItem _resizeRelocateInfo = null;

	protected String[] _comboElements = null;

	protected ApplicationConfiguration _appliConf = null;

	public TagRegexNameJPanel( String[] comboElements) {
		this( comboElements, ApplicationConfiguration.instance() );
	}

	/**
	 * Creates new form BlockRegexNameJPanel
	 */
	public TagRegexNameJPanel( String[] comboElements,
								ApplicationConfiguration appliConf) {
		super.init();

		initComponents();

		_comboElements = comboElements;
		_appliConf = appliConf;

		initializeComponentContents();

		setWindowConfiguration( );
	}

	@Override
	public MapResizeRelocateComponentItem getResizeRelocateInfo()
	{
		return( _resizeRelocateInfo );
	}

	protected void initializeComponentContents()
	{
		String selectedItem = null;
		if( _comboElements.length == 1 )
			selectedItem = _comboElements[0];

		ComboBoxFunctions.instance().fillComboBox(jCB_regexName, _comboElements, selectedItem);
	}

	protected void setWindowConfiguration( )
	{
		_resizeRelocateInfo = new MapResizeRelocateComponentItem();
		MapResizeRelocateComponentItem mapRRCI = _resizeRelocateInfo;
		try
		{
			mapRRCI.putResizeRelocateComponentItem( jPanel1, ResizeRelocateItem.FILL_WHOLE_PARENT );
		}
		catch( Throwable th )
		{
			th.printStackTrace();
		}

		ExecutionFunctions.instance().safeMethodExecution( () -> registerInternationalizedStrings() );
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jL_tagName = new javax.swing.JLabel();
        jCB_regexName = new javax.swing.JComboBox<>();

        setLayout(null);

        jPanel1.setLayout(null);

        jL_tagName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jL_tagName.setText("Regex tag name :");
        jL_tagName.setName("jL_tagName"); // NOI18N
        jPanel1.add(jL_tagName);
        jL_tagName.setBounds(10, 10, 175, 14);

        jCB_regexName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(jCB_regexName);
        jCB_regexName.setBounds(190, 10, 160, 20);

        add(jPanel1);
        jPanel1.setBounds(0, 0, 530, 40);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jCB_regexName;
    private javax.swing.JLabel jL_tagName;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

	public ApplicationConfiguration getAppliConf()
	{
		return( _appliConf );
	}

	protected void registerInternationalizedStrings()
	{
		registerInternationalString( CONF_REGEX_TAG_NAME_CANNOT_BE_EMPTY, "You must select a tag for that regex." );
		registerInternationalString( CONF_REGEX_TAG_OFFSET_MUST_BE_A_VALID_NUMBER, "Regex tag offset must be a valid number." );
	}

	@Override
	public String getRegexOrProfileName()
	{
		return( (String) jCB_regexName.getSelectedItem() );
	}

	public void validateRegexName() throws ValidationException
	{
		String errorMessage = null;

		if( getRegexOrProfileName() == null )
			errorMessage = getInternationalString( CONF_REGEX_TAG_NAME_CANNOT_BE_EMPTY );

		if( errorMessage != null )
			throw( new ValidationException( errorMessage, jCB_regexName ) );
	}

	@Override
	public void validateChanges() throws ValidationException
	{
		validateRegexName();
	}

	@Override
	public Dimension getInternalSize()
	{
		return( jPanel1.getSize() );
	}

	public void dispose()
	{
	}

	@Override
	public void setRegexOrProfileName(String value)
	{
		jCB_regexName.setSelectedItem( value );
	}

	@Override
	public void setComponentMapper(ComponentMapper compMapper)
	{
		jL_tagName = compMapper.mapComponent(jL_tagName );
		jPanel1 = compMapper.mapComponent( jPanel1 );
		jCB_regexName = compMapper.mapComponent( jCB_regexName );

		super.setComponentMapper(compMapper);
	}

	@Override
	public void changeLanguage(String language) throws Exception {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void registerInternationalString(String label, String value)
	{
		_internationalizedStringConf.registerInternationalString(label, value);
	}

	@Override
	public String getInternationalString(String label)
	{
		return( _internationalizedStringConf.getInternationalString(label ) );
	}

	@Override
	public String createCustomInternationalString(String label, Object... args) {
		return( _internationalizedStringConf.createCustomInternationalString( label, args ) );
	}
}
