/* 
 * Copyright (C) 2021 Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 */
package com.frojasg1.chesspdfbrowser.view.chess.analysis;

import com.frojasg1.applications.common.components.resizecomp.MapResizeRelocateComponentItem;
import com.frojasg1.applications.common.components.resizecomp.ResizeRelocateItem;
import com.frojasg1.chesspdfbrowser.analysis.AnalysisWindowView;
import com.frojasg1.chesspdfbrowser.analysis.AnalysisWindowViewController;
import com.frojasg1.chesspdfbrowser.analysis.SubvariantAnalysisResult;
import com.frojasg1.chesspdfbrowser.engine.model.chess.game.ChessGame;
import com.frojasg1.chesspdfbrowser.engine.model.chess.game.tree.MoveTreeNode;
import com.frojasg1.chesspdfbrowser.enginewrapper.configuration.ChessEngineConfiguration;
import com.frojasg1.chesspdfbrowser.view.chess.variantformat.impl.VariantFormatterForJTextPaneForEngineAnalysis;
import com.frojasg1.general.desktop.generic.view.DesktopViewComponent;
import com.frojasg1.general.desktop.view.color.ColorInversor;
import com.frojasg1.general.desktop.view.zoom.mapper.ComponentMapper;
import com.frojasg1.general.desktop.view.zoom.mapper.ComposedComponent;
import com.frojasg1.general.view.ViewComponent;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author Francisco Javier Rojas Garrido <frojasg1@hotmail.com>
 */
public class SimpleVariantAnalysisJPanel extends com.frojasg1.general.desktop.view.panels.CustomJPanelBase 
	implements DesktopViewComponent, ComposedComponent,
				AnalysisWindowView
{
	protected MapResizeRelocateComponentItem _resizeRelocateInfo = null;

	protected VariantFormatterForJTextPaneForEngineAnalysis _variantResultFormatter = null;

	protected ChessEngineAnalysisJPanel _parent = null;

	/**
	 * Creates a new form AnalsysSimpleVariantJPanel
	 */
	public SimpleVariantAnalysisJPanel()
	{
	}

	public void init( ChessEngineAnalysisJPanel parent )
	{
		super.init();

		initComponents();

		_parent = parent;

		setWindowConfiguration();
	}

	public AnalysisWindowViewController getController()
	{
		return( _parent.getController() );
	}

	public Integer getId()
	{
		return( _parent.getId() );
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jB_addToGame = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTP_variantTextView = new javax.swing.JTextPane();

        setLayout(null);

        jPanel1.setName("SimpleVariantAnalysisJPanel_internal"); // NOI18N
        jPanel1.setLayout(null);

        jB_addToGame.setMaximumSize(new java.awt.Dimension(20, 20));
        jB_addToGame.setMinimumSize(new java.awt.Dimension(20, 20));
        jB_addToGame.setName("name=jB_addToGame,icon=com/frojasg1/generic/resources/othericons/insert.png"); // NOI18N
        jB_addToGame.setPreferredSize(new java.awt.Dimension(20, 20));
        jB_addToGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_addToGameActionPerformed(evt);
            }
        });
        jPanel1.add(jB_addToGame);
        jB_addToGame.setBounds(5, 5, 20, 20);

        jScrollPane1.setWheelScrollingEnabled(false);

        jTP_variantTextView.setEditable(false);
        jTP_variantTextView.setName("jTP_variantTextView"); // NOI18N
        jTP_variantTextView.setPreferredSize(null);
        jScrollPane1.setViewportView(jTP_variantTextView);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 5, 520, 40);

        add(jPanel1);
        jPanel1.setBounds(0, 0, 560, 50);
    }// </editor-fold>//GEN-END:initComponents

    private void jB_addToGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_addToGameActionPerformed
        // TODO add your handling code here:

		MoveTreeNode mtn = getCurrentMoveTreeNode();
		if( mtn != null )
			getController().addSubvariantAnalysisToGame(getId(), _variantResultFormatter.getScore(), mtn );

    }//GEN-LAST:event_jB_addToGameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_addToGame;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTP_variantTextView;
    // End of variables declaration//GEN-END:variables

	protected MoveTreeNode getCurrentMoveTreeNode()
	{
		MoveTreeNode result = null;
		ChessGame cg = _variantResultFormatter.getChessGame();
		if( cg != null )
		{
			result = cg.getMoveTreeGame().getFirstChild();
		}

		return( result );
	}

	protected VariantFormatterForJTextPaneForEngineAnalysis createVariantResultFormatter()
	{
		VariantFormatterForJTextPaneForEngineAnalysis result = new VariantFormatterForJTextPaneForEngineAnalysis( jTP_variantTextView );
		result.init();

		return( result );
	}

	public JPanel getParentPanel()
	{
		return( jPanel1 );
	}

	protected void setWindowConfiguration( )
	{
		_resizeRelocateInfo = new MapResizeRelocateComponentItem();
		MapResizeRelocateComponentItem mapRRCI = _resizeRelocateInfo;
		try
		{
			mapRRCI.putResizeRelocateComponentItem( jPanel1, ResizeRelocateItem.FILL_WHOLE_PARENT );
			mapRRCI.putResizeRelocateComponentItem( jScrollPane1, ResizeRelocateItem.RESIZE_TO_RIGHT );
//			mapRRCI.putResizeRelocateComponentItem( jTP_variantTextView, 0 );
		}
		catch( Throwable th )
		{
			th.printStackTrace();
		}
	}

	@Override
	public MapResizeRelocateComponentItem getResizeRelocateInfo()
	{
		return( _resizeRelocateInfo );
	}

	@Override
	public Dimension getInternalSize()
	{
		return( getParentPanel().getSize() );
	}

	@Override
	public Rectangle getInternalBounds()
	{
		return( getParentPanel().getBounds() );
	}

	@Override
	public SimpleVariantAnalysisJPanel getComponent()
	{
		return( this );
	}

	@Override
	public void setComponentMapper(ComponentMapper compMapper)
	{
		jB_addToGame = compMapper.mapComponent( jB_addToGame );
		jPanel1 = compMapper.mapComponent( jPanel1 );
		jScrollPane1 = compMapper.mapComponent( jScrollPane1 );
		jTP_variantTextView = compMapper.mapComponent( jTP_variantTextView );

		if( !hasBeenAlreadyMapped() )
			_variantResultFormatter = createVariantResultFormatter();

		super.setComponentMapper(compMapper);
	}

	@Override
	public void resetSubvariants(Integer id)
	{
		jTP_variantTextView.setText("");
	}

	@Override
	public synchronized void updateSubvariant(Integer id, int index, SubvariantAnalysisResult subvariant)
	{
		_variantResultFormatter.setSubvariantInfo( subvariant.getScore(), subvariant.getSubvariantChessGame() );
	}

	@Override
	public void releaseResources() {
		_resizeRelocateInfo = null;
		_variantResultFormatter = null;
	}

	@Override
	public void updateConfigurationItems(List<String> engineConfigurationItems)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void updateEngineConfiguration(Integer id, ChessEngineConfiguration engineConf) {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	protected void invertColorsChild(ColorInversor colorInversor)
	{
		super.invertColorsChild(colorInversor);

		_variantResultFormatter.invertColors(colorInversor);
	}
}
